<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">


    <!--
        context-param标签是配置在最外层的, 就是说是在<web-app>下面的
        context-param本身也是键值对, 不过从它的层次来看, 显然这个键值对是属于整个web工程的, 而不是具体到某一个servlet程序的
        context-param可以配置多组
    -->
    <context-param>
        <param-name>url</param-name>
        <param-value>/contextServlet</param-value>
    </context-param>
    <context-param>
        <param-name>username</param-name>
        <param-value>root</param-value>
    </context-param>
    <context-param>
        <param-name>password</param-name>
        <param-value>123</param-value>
    </context-param>



    <!--
        servlet标签用来给Tomcat服务器配置servlet程序的
        没什么问题, 这个逻辑很清晰
    -->
    <servlet>
        <!--
            servlet-name标签 -> 是用来给servlet程序起一个别名的, 就像小明一样
            这个别名一般要和实现了Servlet接口的实现类的名字一样
        -->
        <servlet-name>HelloServlet</servlet-name>
        <!--
            servlet-class标签 -> 是用来写出来servlet程序的完整路径的全名
            全名就是说要把资源路径, 包的路径, 等等都写出来
        -->
        <servlet-class>com.atguigu.servlet.HelloServlet</servlet-class>

        <!-- 键值对能够配很多对  从名字也能猜出来, 其实就是和HelloServlet中的init方法对应的 -->
        <init-param>
            <!-- username对应的值是root -->
            <param-name>username</param-name>
            <param-value>root</param-value>
        </init-param>

        <init-param>
            <param-name>url</param-name>
            <param-value>jdbc:mysql://localhost:3306/test</param-value>
        </init-param>


    </servlet>

    <!--
        servlet-mapping标签给servlet程序配置访问地址
        上面的servlet标签只是给出来了程序, 但是没有地址
    -->
    <servlet-mapping>
        <!--
            servlet-name标签的作用是告诉服务器, 当前配置的地址给哪个servlet程序使用
            servlet-name 需要和下面一起理解, 比如url-pattern的值是给servlet-name使用的. servlet-name的值一定和上面一样
        -->
        <servlet-name>HelloServlet</servlet-name>
        <!--
            url-pattern 标签配置访问的地址
            /           斜杠在服务器解析的时候 -> 会解析为 http://ip:port/工程路径
                        这里的地址就是Tomcat实例中配置的url
            /hello      表示地址为 -> http://ip:port/工程路径/hello

            /            / = http://localhost:8088/06_servlet.html
            /hello       / = http://localhost:8088/06_servlet.html/hello
        -->
        <url-pattern>/hello</url-pattern>
        <!--
            一般来说, url-pattern中的值是和实现了Servlet接口的类名是一样的, 因为这个值, 就是浏览器中访问的值
            见名知意, 规则大于配置. 尽量能够形成对应, 而不要写/abc
        -->
    </servlet-mapping>





    <!--
        为HelloServlet2配置文件信息
    -->
    <servlet>
        <servlet-name>HelloServlet2</servlet-name>
        <servlet-class>com.atguigu.servlet.HelloServlet2</servlet-class>

        <init-param>
            <param-name>路由地址</param-name>
            <param-value>/hello2</param-value>
        </init-param>
    </servlet>
    <servlet-mapping>
        <servlet-name>HelloServlet2</servlet-name>
        <url-pattern>/hello2</url-pattern>
    </servlet-mapping>


    <!--
       为HelloServlet3配置信息
   -->
    <servlet>
        <servlet-name>HelloServlet3</servlet-name>
        <servlet-class>com.atguigu.servlet.HelloServlet3</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>HelloServlet3</servlet-name>
        <url-pattern>/hello3</url-pattern>
    </servlet-mapping>


    <!--
        为HelloServlet4配置信息
    -->
    <servlet>
        <servlet-name>HelloServlet4</servlet-name>
        <servlet-class>com.atguigu.servlet.HelloServlet4</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>HelloServlet4</servlet-name>
        <url-pattern>/hello4</url-pattern>
    </servlet-mapping>


    <!--  为ContextServlet写的配置文件  -->
    <servlet>
        <servlet-name>ContextServlet</servlet-name>
        <servlet-class>com.atguigu.servlet.ContextServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>ContextServlet</servlet-name>
        <url-pattern>/contextServlet</url-pattern>
    </servlet-mapping>



</web-app>
